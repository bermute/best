<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.best.calendar.CalendarDAO">

	<insert id="saveCalendar" parameterType="map" useGeneratedKeys="true" keyProperty="reserveIdx">
	    INSERT INTO reserve (emp_idx, start_datetime, end_datetime, subject, room_idx)
	    SELECT #{emp_idx}, #{startDateTime}, #{endDateTime}, #{subject}, #{room_idx}
	    WHERE NOT EXISTS (
	        SELECT 1
	        FROM reserve
	        WHERE room_idx = #{room_idx}
	          AND (start_datetime &lt; #{endDateTime} AND end_datetime > #{startDateTime})
	    )
	</insert>

	
<!-- 	<select id="getEvents" resultType="map" >
        SELECT 
        	reserve_idx AS id,
        	subject AS title,
            start_datetime AS start,
            end_datetime AS end
            
        FROM reserve
        WHERE start_datetime >= #{startDate}
          AND end_datetime &lt; #{endDate}
	</select> -->
	
	<select id="getEvents" resultType="map">
	    SELECT 
	        r.reserve_idx as id,
	        r.start_datetime as start,
	        r.end_datetime as end,
	        r.subject as title,
	        r.room_idx as room_idx,
	        rm.name as room_name,
	        e.emp_idx as emp_idx,
	        e.name as name,
	        e.depart_idx as depart_idx,
	        e.rank_idx as rank_idx,
	        d.depart_name as depart_name,
	        p.rank_name as rank_name,
	        GROUP_CONCAT(CONCAT(m.material_name, '(', COALESCE(b.quantity, 0), ')')) as material_quantities
	    FROM 
	        reserve r
	    JOIN 
	        employee e ON r.emp_idx = e.emp_idx
	    JOIN 
	        department d ON e.depart_idx = d.depart_idx
	    JOIN 
	        rank_emp p ON e.rank_idx = p.rank_idx
	    JOIN 
	        room rm ON r.room_idx = rm.room_idx
	    LEFT JOIN 
	        borrow b ON r.reserve_idx = b.reserve_idx
	    LEFT JOIN 
	        material m ON b.material_idx = m.material_idx
	    WHERE 
	        r.start_datetime >= #{startDate}
	        AND r.end_datetime &lt; #{endDate}
	    GROUP BY 
	        r.reserve_idx, r.start_datetime, r.end_datetime, r.subject, r.room_idx, rm.name, 
	        e.emp_idx, e.name, e.depart_idx, e.rank_idx, d.depart_name, p.rank_name;
	</select>

	
	<select id="getRoomList" resultType="com.best.calendar.RoomDTO">
		select * from room order by room_idx ASC
	</select>
	
	<select id="myReserveList" parameterType="map" resultType="map">
	    SELECT 
	        r.reserve_idx,
	        r.start_datetime,
	        r.end_datetime,
	        r.subject,
	        r.room_idx,
	        rm.name as room_name,
	        CASE 
	            WHEN CURRENT_TIMESTAMP > r.end_datetime THEN '이용 완료' 
	            WHEN CURRENT_TIMESTAMP BETWEEN r.start_datetime AND r.end_datetime THEN '이용중' 
	            ELSE '변경 가능' 
	        END AS status
	    FROM reserve r
	    JOIN room rm ON r.room_idx = rm.room_idx
	    WHERE r.emp_idx = #{loginId}
	    ORDER BY r.reserve_idx DESC 
	    LIMIT #{limit} OFFSET #{offset}
	</select>

	
	<select id="getTotalPages" parameterType="map" resultType="int">
	    SELECT CEIL(COUNT(*) / #{limit}) 
	    FROM reserve 
	    WHERE emp_idx = #{loginId}
	</select>
	
	
	<update id="myReserveUpdate" parameterType="map">
	    UPDATE reserve
	    SET start_datetime = #{startDateTime},
	        end_datetime = #{endDateTime},
	        subject = #{subject}
	    WHERE reserve_idx = #{reserveIdx}
	      AND NOT EXISTS (
	          SELECT 1
	          FROM reserve
	          WHERE room_idx = #{roomIdx}
	            AND reserve_idx != #{reserveIdx}  <!-- 같은 예약은 제외 -->
	            AND (
	                start_datetime &lt; #{endDateTime} AND
	                end_datetime > #{startDateTime} <!-- 시간 겹침 조건 -->
	            )
	      )
	</update>

	
	<delete id="cancelReserve" parameterType="map">
	    DELETE FROM reserve WHERE reserve_idx = #{reserveIdx}
	</delete>
	
	<!-- 회의실 등록에 사용하는 쿼리문 -->
	<!-- 기자재들 가져오기 쿼리문 -->
	<select id="getAllMaterials" resultType="map">
	    SELECT * 
	    FROM material 
	    ORDER BY material_idx ASC
	</select>

	<!-- 등록된 회의실 전부 가져오기 -->
	<select id="allRoomList" resultType="map">
	    SELECT * 
	    FROM room
	    ORDER BY room_idx ASC
	</select>
	
	<!-- 회의실 저장 -->
	<insert id="insertRoomInfo" parameterType="map" useGeneratedKeys="true" keyProperty="roomIdx">
	    INSERT INTO room (name, photo, max_capacity) 
	    VALUES (#{name}, #{photo}, #{maxCapacity})
	</insert>

	
	<!-- 기자재 회의실 매핑 테이블 저장 -->
	<insert id="insertRoomMaterial" parameterType="map">
	    INSERT INTO room_material (room_idx, material_idx, quantity)
	    VALUES (#{roomIdx}, #{materialIdx}, #{quantity});
	</insert>
	
	<!-- 기자재 잔여수량 뺴기 -->
	<update id="updateMaterial" parameterType="map">
	    UPDATE material
	    SET remain_quantity = remain_quantity - #{quantity}
	    WHERE material_idx = #{materialIdx}
	      AND remain_quantity >= #{quantity}
	</update>
	
	<!-- 회의실 삭제전 회의실 사용 예약 있는지 확인 쿼리 -->
	<select id="selectReserveData" parameterType="integer" resultType="com.best.calendar.ReserveDTO">
	    SELECT * 
	    FROM reserve 
	    WHERE room_idx = #{roomIdx}
	      AND end_datetime &lt;= NOW()
	</select>
	
	<!-- 회의실 삭제 -->
	<delete id="delRoomInfo" parameterType="integer">
	    DELETE FROM room
	    WHERE room_idx = #{roomIdx}
	</delete>

	<!-- 삭제시 기자재 수량 업데이트 -->
	<update id="updateMaterialBecauseRoomInfo" parameterType="integer">
	    UPDATE material AS m
	    JOIN room_material AS rm ON m.material_idx = rm.material_idx
	    SET m.remain_quantity = m.remain_quantity + rm.quantity
	    WHERE rm.room_idx = #{roomIdx}
	</update>
	
	<!-- 직원 회의실 예약할때 선택한 회의실에 나오는 기본 기자재들 -->
	<select id="getRoomMaterialList" parameterType="integer" resultType="map">
	    SELECT 
	        rm.material_idx, 
	        rm.quantity, 
	        m.material_name
	    FROM 
	        room_material rm
	    JOIN 
	        material m 
	    ON 
	        rm.material_idx = m.material_idx
	    WHERE 
	        rm.room_idx = #{roomIdx}
	</select>
	<!-- 기자재 대여 테이블인서트 -->
	<insert id="insertBorrow" parameterType="map">
        INSERT INTO borrow (emp_idx,reserve_idx, material_idx,quantity,start_datetime,end_datetime)
        VALUES (#{empIdx},#{reserveIdx}, #{materialIdx},#{quantity},#{startDatetime},#{endDatetime})
	</insert>
	
	<!-- 특정 예약된 회의실의 모든 정보 -->
	<select id="getReserves" parameterType="integer" resultType="map">
		select * from reserve where room_idx = #{roomIdx}
	</select>
	<!-- 회의실 예약 삭제시 쿼리 -->
	<update id="cancelMaterial" parameterType="map">
		UPDATE material m
		SET m.remain_quantity = m.remain_quantity + (
		    SELECT b.quantity
		    FROM borrow b
		    WHERE b.material_idx = m.material_idx
		      AND b.reserve_idx = #{reserveIdx}
		)
		WHERE m.material_idx IN (
		    SELECT b.material_idx
		    FROM borrow b
		    WHERE b.reserve_idx = #{reserveIdx}
		)
		AND EXISTS (
		    SELECT 1
		    FROM borrow b
		    WHERE b.reserve_idx = #{reserveIdx}
		)
	</update>
	<!-- borrow 삭제 같이  -->
	<delete id="delBorrow" parameterType="map">
	    DELETE FROM borrow WHERE reserve_idx = #{reserveIdx}
	</delete>
	<!-- 회의실 삭제시 회의실 기자재 매핑 테이블 삭제 -->
	<delete id="delRoomMaterial" parameterType="int">
		DELETE FROM room_material WHERE room_idx = #{roomIdx}
	</delete>
	
	<!-- 부서 정보 사원 가져오기 -->
	<select id="findById" parameterType="map" resultType="map">
		select depart_idx from employee where emp_idx = #{loginId}
	</select>
	<!-- 캘린더 정보 저장 -->
	<insert id="saveEvent" parameterType="map" useGeneratedKeys="true" keyProperty="eventId">
	    INSERT INTO schedule (emp_idx, subject, start_datetime, end_datetime, all_day, visibility,depart_idx)
	    VALUES (
	        #{loginId},
	        #{title},
	        STR_TO_DATE(#{start}, '%Y-%m-%dT%H:%i:%s.%fZ'),
	        STR_TO_DATE(#{end}, '%Y-%m-%dT%H:%i:%s.%fZ'),
	        #{allDay},
	        #{visibility},
	        #{employeeDepartmentIdx.depart_idx}
	    )
	</insert>
	
	<!-- 저장된 캘린더 정보 가져오기 -->
	<select id="getMyEvents" resultType="map">
		SELECT 
		    s.schedule_idx AS id, 
		    s.subject AS title, 
		    s.start_datetime AS start, 
		    s.end_datetime AS end, 
		    s.visibility,
		    s.depart_idx AS department, 
		    s.all_day AS allDay,
		    s.emp_idx AS employeeIdx,
		    e.name AS employeeName
		FROM 
		    schedule s
		JOIN 
		    employee e ON s.emp_idx = e.emp_idx;
	</select>
	
	<!-- 캘린더 업데이트 -->
	<update id="updateMyEvent" parameterType="map">
	    UPDATE schedule
	    SET 
	        start_datetime = STR_TO_DATE(REPLACE(REPLACE(REPLACE(#{start}, 'T', ' '), 'Z', ''), '.000', ''), '%Y-%m-%d %H:%i:%s'),
	        end_datetime = STR_TO_DATE(REPLACE(REPLACE(REPLACE(#{end}, 'T', ' '), 'Z', ''), '.000', ''), '%Y-%m-%d %H:%i:%s'),
	        visibility = #{visibility}, 
	        all_day = #{allDay}
	    WHERE schedule_idx = #{id};
	</update>
	<!-- 캘린더 이벤트 삭제 -->
	<delete id="delEvent" parameterType="map">
		DELETE FROM schedule WHERE schedule_idx = #{id}
	</delete>
	
	<!-- 홀리데이 저장 -->
	<insert id="saveHoliday" parameterType="String">
        INSERT INTO holiday (holiday_date, holiday_name)
        VALUES (#{date}, #{name})
	</insert>
	
	<!-- 홀리데이 가져오기 -->
	<select id="getAllHolidays" resultType="com.best.calendar.HolidayDTO">
	    SELECT holiday_date, holiday_name FROM holiday
	</select>
	
	<!-- 홀리데이 날짜 가져오기 -->
	<select id="getHolidayCalculate" resultType="java.time.LocalDate">
		select holiday_date from holiday
	</select>
	
</mapper>  



























