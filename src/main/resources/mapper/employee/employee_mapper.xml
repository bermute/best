<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.best.emp.EmployeeDAO">

    <select id="empList" resultType="map" parameterType="map">
        SELECT 
            ee.emp_idx, 
            ee.name, 
            ee.email, 
            ee.phone, 
            ee.mobile, 
            ee.photo, 
            ee.enable, 
            ee.state, 
            dt.depart_name, 
            rp.rank_name
        FROM
            employee ee 
        INNER JOIN 
            department dt 
            ON ee.depart_idx = dt.depart_idx
        INNER JOIN 
            rank_emp rp 
            ON ee.rank_idx = rp.rank_idx
        WHERE enable = #{enable}
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchFilter == 'name'">
                    AND ee.name LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchFilter == 'department'">
                    AND dt.depart_name LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
            </choose>
        </if>
        ORDER BY ee.emp_idx DESC 
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="allCount" resultType="int" parameterType="map">
        SELECT 
            CEIL(COUNT(ee.emp_idx)/#{cnt}) AS pages 
        FROM 
            employee ee
        INNER JOIN 
            department dt 
            ON ee.depart_idx = dt.depart_idx
        WHERE enable = #{enable} 
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchFilter == 'name'">
                    AND ee.name LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchFilter == 'department'">
                    AND dt.depart_name LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
            </choose>
        </if>
    </select>

	<!-- 사원정보 상세보기 : 개인정보 -->
	<select id="empDetail" resultType="map" parameterType="int">
		SELECT 
            ee.photo, 
            ee.name,
            ee.resident_number,
            ee.gender,
            ee.start_date,
            ee.end_date,
            ee.email,
            ee.address,
            ee.emp_idx,
            dt.depart_idx,
            dt.depart_name,
            rp.rank_idx,
            rp.rank_name,
            ee.salary,
			ee.account_number,
            ee.phone, 
            ee.mobile, 
            ee.ip,
            dr.license,
            dr.license_period,
            dr.certificate,
            ee.enable, <!-- 계정 활성화여부 -->
            ee.state   <!-- 근무상태 -->
        FROM
            employee ee 
        LEFT JOIN 
            department dt 
            ON ee.depart_idx = dt.depart_idx
        LEFT JOIN 
            rank_emp rp 
            ON ee.rank_idx = rp.rank_idx
        LEFT JOIN
        	driver dr
        	ON ee.emp_idx = dr.emp_idx
        WHERE ee.emp_idx = #{emp_idx}
	</select>	



	<!-- 사원정보 상세보기 : 최근 6건의 변경내역 -->
	<select id="empHistory" resultType="map" parameterType="int">
		SELECT 
            emp_idx,
            category,
            before_update,
            after_update,
            date,
            emp_manage_idx
        FROM
            emp_history
        WHERE emp_idx = #{emp_idx}
        ORDER BY date DESC LIMIT 6
	</select>

	<!-- 사원정보 상세보기 : 이번 달 근태정보 -->
	<select id="empAttend" resultType="map" parameterType="int">
		SELECT
			COUNT(attend_idx) AS work_cnt <!-- 이번달 근무일수 --> 
        FROM
            attendance 
        WHERE emp_idx = #{emp_idx}
	</select>


	<!-- 사원정보 상세보기 : 연차정보 -->
	<select id="empLeave" resultType="map" parameterType="int">
		SELECT 
		    lv.total_leave,
		    lv.remain_leave,
		    lh.start_date AS lv_start_date,
		    lh.end_date AS lv_end_date
		FROM leave_emp lv
		LEFT JOIN leave_history lh 
		    ON lv.leave_idx = lh.leave_idx
		WHERE lv.emp_idx = #{emp_idx}
		ORDER BY lh.end_date DESC
		LIMIT 1
	</select>


	<!-- 사원정보 상세보기 : 첨부파일 -->
	<select id="empAttach" resultType="map" parameterType="int">
		SELECT
			file_name,
			date 
		FROM attachment
		WHERE
			attach_category = 3
		AND 
			idx_num = #{emp_idx}
		ORDER BY date DESC
		LIMIT 5
	</select>
	
	<!-- 사원정보 업데이트 -->
	<update id="empUpdate" parameterType="map">
	    UPDATE employee
	    <set>
	        ${col} = #{newVal},
	        <if test="col == 'end_date' and state != null and enable != null">
	            state = #{state},
	            enable = #{enable}
	        </if>
	    </set>
	    WHERE emp_idx = #{emp_idx}
	</update>
	
	<!-- 기사정보 관리 insert 또는 update -->
	<update id="driverUpsert" parameterType="map">
		INSERT INTO driver (emp_idx, license, license_period, certificate)
		VALUES (#{emp_idx}, #{license}, #{license_period}, #{certificate})
		ON DUPLICATE KEY UPDATE
		    license = VALUES(license),
		    license_period = VALUES(license_period),
		    certificate = VALUES(certificate)
	</update>
	
	<!-- 사원정보 업데이트사항 History기록 -->
	<insert id="historyUpdate" parameterType="map">
		INSERT INTO emp_history(emp_idx, category, before_update, after_update, emp_manage_idx)
		VALUES(#{emp_idx}, #{col}, #{currentVal}, #{newVal}, 1)
	</insert>
	
	<!-- 부서 및 직급 드롭다운 메뉴 가져오기 -->
	<select id="empDropdown" resultType="map" parameterType="String">
		SELECT * FROM ${table}
	</select>
	
	<!-- 삭제할 파일의 newFilename정보 가져오기 -->
	<select id="newFilename" parameterType="map">
		SELECT newfile_name FROM attachment
		WHERE attach_category = 3
		AND idx_num = #{idx_num}
		AND file_name = #{file_name}
	</select>
	
	<!-- 새 파일명 정보 가져오기 -->
	<select id="getNewFileName" parameterType="String">
		SELECT newfile_name FROM attachment
		WHERE attach_category = 3
		AND file_name = #{file_name}
	</select>
	
	<!-- 파일삭제 -->
	<delete id="fileDel" parameterType="map">
		DELETE FROM attachment
		WHERE attach_category = 3
		AND idx_num = #{idx_num}
		AND file_name = #{file_name}
	</delete>
	
	<!-- 파일업로드 -->
	<insert id="fileUpload" parameterType="map">
		INSERT INTO attachment(attach_category, idx_num, file_name, newfile_name)
		VALUES(3, #{emp_idx}, #{fileName}, #{newFileName})
	</insert>

	
	
	<!-- 기존 프로필 사진 파일명 가져오기 -->
	<select id="getPhotoFileName" resultType="String">
	    SELECT photo FROM employee WHERE emp_idx = #{empIdx}
	</select>
	
	
	<!-- 새 프로필 사진 파일명 업데이트 -->
	<update id="updatePhotoFile">
	    UPDATE employee SET photo = #{newFileName} WHERE emp_idx = #{empIdx}
	</update>
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	

	<!-- 사원등록 -->
	<insert id="empCreate"
	        parameterType="com.best.emp.EmployeeDTO"
	        useGeneratedKeys="true"
	        keyColumn="emp_idx"     
	        keyProperty="emp_idx"> 	
		INSERT INTO employee(
			photo, 
			name, 
			gender, 
			resident_number, 
			address, 
			account_number, 
			salary, 
			email, 
			phone, 
			start_date, 
			mobile, 
			rank_idx, 
			password
		)VALUES(
			#{photo}, 
			#{name}, 
			#{gender}, 
			#{resident_number}, 
			#{address}, 
			#{account_number}, 
			#{salary}, 
			#{email}, 
			#{phone}, 
			#{start_date}, 
			#{mobile}, 
			#{rank_idx}, 
			#{password}	
		)
	</insert>
	
	<!-- 상급자 가져오기 -->
	<select id="getParent" parameterType="int">
        SELECT position_idx, position_name
        FROM positions
        ORDER BY position_idx ASC
	</select>
	
	<!-- 내 직급순위 가져오기 -->
	<select id="getMyPosition">
		SELECT position_idx
		FROM rank_emp
		WHERE rank_idx = #{rank_idx}
	</select>
	
	<!-- 상급자 존재여부 체크 -->
	<select id="parentCheck" parameterType="map">
        SELECT emp_idx
        FROM employee
        WHERE rank_idx = #{rank_idx} 
          <if test="depart_idx != null">
              AND depart_idx = #{depart_idx}
          </if>
          AND enable = 1  
        LIMIT 1
	</select>
	
	<!-- 상급자정보 업데이트 -->
	<update id="parentUpdate" parameterType="map">
	    UPDATE employee e1
	    SET e1.parent_emp_idx = (
	        SELECT e2.emp_idx
	        FROM employee e2
	        WHERE e2.rank_idx = #{rank_idx} 
	          <if test="depart_idx != null">
	              AND e2.depart_idx = #{depart_idx}
	          </if>
	          AND e2.enable = 1  
	        LIMIT 1
	    )
	    WHERE e1.emp_idx = #{emp_idx}
	</update>
	
	<!-- 조직도정보 가져오기 -->
	<select id="orgList" resultType="map" parameterType="map">
		SELECT 
            ee.emp_idx,
            ee.name, 
            ee.email, 
            ee.phone, 
            ee.mobile, 
            ee.photo, 
            ee.enable, 
            ee.state, 
            dt.depart_idx, 
            dt.depart_name, 
            rp.rank_idx,
            rp.rank_name,
            dr.route_name
        FROM
            employee ee 
        INNER JOIN 
            department dt 
            ON ee.depart_idx = dt.depart_idx
        INNER JOIN 
            rank_emp rp 
            ON ee.rank_idx = rp.rank_idx
        LEFT JOIN
        	driver dr
        	ON ee.emp_idx = dr.emp_idx
        WHERE enable = 1
        <if test="depart_idx != null">
        	AND dt.depart_idx = #{depart_idx}
        </if>
       	<if test="depart_idx == 4 and route_name != null and route_name != ''">
         	AND dr.route_name = #{route_name}
       	</if>
       	ORDER BY 
	    <choose>
	        <when test="depart_idx != null">
	            dt.depart_idx, rp.rank_idx, ee.emp_idx
	        </when>
	        <when test="depart_idx == 4">
	            rp.rank_idx, ee.emp_idx
	        </when>
	        <otherwise>
	            rp.rank_idx, ee.emp_idx
	        </otherwise>
	    </choose>
	</select>
	
	<!-- 종원 마이상세 값변경 -->
	<update id="updateMyDetail" parameterType="map">
	UPDATE employee
	SET ${col}=#{newVal}
	WHERE emp_idx = #{loginId}
	</update>
	
	<!-- 종원 사인 있니없니? -->
	<select id="checkSign" parameterType="map" resultType="map">
		SELECT sign FROM employee WHERE emp_idx = #{loginId}
	</select>
	
	<!-- 종원 사인 델 -->
	<update id="delSign" parameterType="map">
		UPDATE employee SET sign = null WHERE emp_idx = #{loginId}
	</update>
	
	<!-- infoHistoryCheck -->
	<select id="infoHistoryCheck" resultType="map">
		SELECT
			eh.category as category,
			eh.before_update as before_update,
			eh.after_update as after_update,
			DATE_FORMAT(eh.date, '%Y-%m-%d') AS date,
			e.name as name,
			eh.emp_manage_idx as emp_manage_idx
		FROM emp_history eh
		JOIN
			employee e ON eh.emp_manage_idx = e.emp_idx
		WHERE eh.emp_idx = #{param1}
		ORDER BY eh.date DESC
	</select>
	
	<!-- 나의 정보 업데이트시 히스토리  -->
	<insert id="insertEmpHistory" parameterType="map">
		INSERT INTO emp_history (emp_idx,category,before_update,after_update,emp_manage_idx)
		VALUES (#{loginId},#{col},#{currentVal},#{newVal},#{loginId})
	</insert>
	
</mapper>
