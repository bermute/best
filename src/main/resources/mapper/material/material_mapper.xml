<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.best.material.MaterialDAO">
	<!-- 기자재 관리 페이지 기자재 목록 -->
	<select id="materialList" parameterType="map" resultType="map">
		SELECT * FROM material ORDER BY material_idx LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<select id="getTotalPages" parameterType="map" resultType="int">
	    SELECT CEIL(COUNT(*) / #{limit}) 
	    FROM material
	</select>
	
	<insert id="insertMaterialInfo" parameterType="map">
		insert into material (material_name,quantity,remain_quantity)
		values(#{materialName},#{materialQuantity},#{materialQuantity})
	</insert>
	<!-- 기자재 업데이트 로직 -->
	<update id="updateMaterialInfo" parameterType="map">
	    UPDATE material
	    SET 
	        remain_quantity = remain_quantity + (#{updateTotalQuantity} - quantity)
	    WHERE material_idx = #{materialIdx}
	</update>

	<update id="updateTotalQuantity" parameterType="map">
	    UPDATE material
	    SET quantity = #{updateTotalQuantity}
	    WHERE material_idx = #{materialIdx}
	</update>
	
	<!-- 기자재 삭제 -->
	<delete id="delMaterial" parameterType="map">
	    DELETE FROM material
	    WHERE material_idx = #{materialIdx}
	    AND NOT EXISTS (
	        SELECT 1 
	        FROM room_material
	        WHERE material_idx = #{materialIdx}
	    )
	    AND NOT EXISTS (
	        SELECT 1 
	        FROM borrow
	        WHERE material_idx = #{materialIdx}
	        AND flag = 0
	    );
	</delete>
	
	<!-- 기자재 에약 현황 리스트 -->
	<select id="getBorrowList" parameterType="map" resultType="map">
	    SELECT 
	        b.borrow_idx,
	        res.reserve_idx,
	        e.emp_idx,
	        e.name,
	        d.depart_name,
	        r.rank_name,
	        rm.name AS room_name,
	        b.start_datetime,
	        b.end_datetime,
	        b.flag,
	        b.handler_emp_idx,
	        he.name AS handler_name,
	        hd.depart_name AS handler_depart_name,
	        hr.rank_name AS handler_rank_name,
	        DATE_FORMAT(b.confirmation_datetime, '%Y-%m-%d %H:%i') AS confirmation_datetime,
	        GROUP_CONCAT(CONCAT(m.material_name, ' (', b.quantity, ')') SEPARATOR ', ') AS material_with_quantity
	    FROM 
	        borrow b
	    JOIN 
	        employee e ON b.emp_idx = e.emp_idx
	    JOIN 
	        department d ON e.depart_idx = d.depart_idx
	    JOIN 
	        rank_emp r ON e.rank_idx = r.rank_idx
	    JOIN 
	        reserve res ON b.reserve_idx = res.reserve_idx
	    JOIN 
	        room rm ON res.room_idx = rm.room_idx
	    JOIN 
	        material m ON b.material_idx = m.material_idx
	    LEFT JOIN 
	        employee he ON b.handler_emp_idx = he.emp_idx
	    LEFT JOIN 
	        department hd ON he.depart_idx = hd.depart_idx 
	    LEFT JOIN 
	        rank_emp hr ON he.rank_idx = hr.rank_idx
	    WHERE 
	        DATE(b.end_datetime) &lt;= CURRENT_DATE
	        <if test="returnStatus != null and returnStatus == '미반납'">
	            AND b.flag = 0
	        </if>
	        <if test="returnStatus != null and returnStatus == '반납완료'">
	            AND b.flag = 1
	        </if>
	    GROUP BY 
	        res.reserve_idx, e.emp_idx, d.depart_name, r.rank_name, rm.name, b.start_datetime, b.end_datetime, b.flag, b.handler_emp_idx
	    ORDER BY 
	        b.end_datetime DESC
		LIMIT #{size} OFFSET #{offset}
	</select>
	<select id="getBorrowCount" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM (
	        SELECT 
	            res.reserve_idx
	        FROM 
	            borrow b
	        JOIN 
	            employee e ON b.emp_idx = e.emp_idx
	        JOIN 
	            department d ON e.depart_idx = d.depart_idx
	        JOIN 
	            rank_emp r ON e.rank_idx = r.rank_idx
	        JOIN 
	            reserve res ON b.reserve_idx = res.reserve_idx
	        JOIN 
	            room rm ON res.room_idx = rm.room_idx
	        JOIN 
	            material m ON b.material_idx = m.material_idx
	        LEFT JOIN 
	            employee he ON b.handler_emp_idx = he.emp_idx
	        LEFT JOIN 
	            department hd ON he.depart_idx = hd.depart_idx 
	        LEFT JOIN 
	            rank_emp hr ON he.rank_idx = hr.rank_idx
	        WHERE 
	            DATE(b.end_datetime) &lt;= CURRENT_DATE
	            <if test="returnStatus != null and returnStatus == '미반납'">
	                AND b.flag = 0
	            </if>
	            <if test="returnStatus != null and returnStatus == '반납완료'">
	                AND b.flag = 1
	            </if>
	        GROUP BY 
	            res.reserve_idx, e.emp_idx, d.depart_name, r.rank_name, rm.name, b.start_datetime, b.end_datetime, b.flag, b.handler_emp_idx
	    ) AS groupedData
	</select>

	
	
	<!-- 반납 로직 -->
	<select id="getReserveIdx" parameterType="map" resultType="int">
		SELECT reserve_idx FROM borrow b WHERE borrow_idx = #{borrowIdx}
	</select>
	<select id="getMaterialConfirm" parameterType="int" resultType="map">
		SELECT material_idx,quantity,borrow_idx FROM borrow WHERE reserve_idx =#{reserveIdx};
	</select>
	<update id="updateRemainQuantity" parameterType="int">
	    UPDATE material
	    SET remain_quantity = remain_quantity + #{quantity}
	    WHERE material_idx = #{materialIdx}
	</update>
	<update id="updateHandlerEmp">
		update borrow 
		set handler_emp_idx = #{loginId},confirmation_datetime = NOW(),flag = 1
		where borrow_idx = #{borrowIdx}
	</update>
	
</mapper>  



























