<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.best.attendance.AttendanceDAO">

	<insert id="insertAttendance">
	  INSERT INTO attendance (emp_idx, status, content)
	  SELECT 
	    e.emp_idx,
	    CASE 
	        WHEN lh.start_date &lt;= CURDATE() AND lh.end_date >= CURDATE() THEN '연차'
	        ELSE NULL 
	    END AS status,
	    'SYSTEM' AS content
	  FROM employee e
	  LEFT JOIN leave_history lh ON e.emp_idx = lh.emp_idx
	  WHERE e.end_date = '9999-12-31';
	</insert>
	
	<select id="checkHistory" parameterType="java.time.LocalDate">
		SELECT COUNT(attend_idx)FROM attendance WHERE date = #{today}		
	</select>
	<!-- 출근버튼 -->
	<update id="updateStartTime" parameterType="map">
		update attendance 
		SET start_time = NOW(), content = '본인'
    	WHERE date = CURDATE() and emp_idx = #{loginId}
    	AND start_time IS NULL;
	</update>
	<!-- 출퇴근 시간 가져오기 -->
	<select id="getWorkTime" parameterType="map" resultType="map">
		SELECT 
			DATE_FORMAT(start_time, '%Y-%m-%d %H:%i') AS start_time,
			DATE_FORMAT(end_time, '%Y-%m-%d %H:%i') AS end_time
		FROM attendance WHERE emp_idx = #{loginId} AND date = CURDATE()
	</select>
	<!-- 출퇴근 리스트 반환 -->
	<select id="getAttendanceList" parameterType="map" resultType="map">
		SELECT
			attend_idx,
		    DATE_FORMAT(start_time, '%Y-%m-%d %H:%i') AS start_time,
		    DATE_FORMAT(end_time, '%Y-%m-%d %H:%i') AS end_time,
		    COALESCE(calculate_time, 0.0) as calculate_time,
		    status,
		    date,
		    CASE 
		        WHEN HOUR(end_time) > 18 THEN TRUNCATE(TIMESTAMPDIFF(MINUTE, CONCAT(DATE(end_time), ' 18:00:00'), end_time) / 60, 1)
		        ELSE 0
		    END AS over_time
		FROM attendance
		WHERE emp_idx = #{loginId}
		ORDER BY date DESC;
	</select>
	
	<!-- 출근 버튼 누른 유저인지 체크용 -->
	<select id="checkButton" parameterType="map">
		SELECT 
	        DATE_FORMAT(start_time, '%H:%i') AS startTime,
	        DATE_FORMAT(end_time, '%H:%i') AS endTime
		FROM attendance WHERE emp_idx = #{loginId} AND date = CURDATE()
	</select>
	
	<!-- 퇴근 버튼 누를때 업데이트 -->
	<update id="updateEndTime" parameterType="map">
		UPDATE attendance
		SET 
		    end_time = NOW(), 
		    content = '본인',
		    calculate_time = TRUNCATE(TIMESTAMPDIFF(MINUTE, start_time, NOW()) / 60, 1),
		    status = CASE 
		                 WHEN TIME(start_time) &lt;= '09:00:00' AND TIME(NOW()) >= '18:00:00' THEN '정상'
		                 WHEN TIME(start_time) > '09:00:00' AND TIME(NOW()) >= '18:00:00' THEN '지각'
		                 WHEN TIME(start_time) > '09:00:00' AND TIME(NOW()) &lt; '18:00:00' THEN '비정상'
		                 WHEN TIME(start_time) &lt;= '09:00:00' AND TIME(NOW()) &lt; '18:00:00' THEN '조퇴'
		             END
		WHERE 
		    date = CURDATE() 
		    AND emp_idx = #{loginId}
		    AND end_time IS NULL;
	</update>
	
	<!-- 로그인 사원 연차 가져오기 -->
	<select id="getLeave" parameterType="map">
		select remain_leave from leave_emp where emp_idx = #{loginId}	
	</select>
	
	<!-- 스케쥴러 결근 처리 -->
	<update id="updateAbsent">
	    UPDATE attendance
	    SET status = '결근'
	    WHERE date = #{date}
	      AND start_time IS NULL
	</update>
	
	<!-- 출근버튼시 업데이트 emp 출근중 -->
	<update id="upEmpStatus" parameterType="map">
		UPDATE employee SET state = #{state} where emp_idx = #{loginId}
	</update>
	
	<!-- 근태 수정 로직 -->
	<select id="selectAttendance" parameterType="map" resultType="map">
	    SELECT 
		    COALESCE(start_time, '00:00:00') AS prevStartTime,
		    COALESCE(end_time, '00:00:00') AS prevEndTime
	    FROM attendance
	    WHERE attend_idx = #{attendIdx}
	</select>
	<update id="updateAttendance" parameterType="map">
		UPDATE attendance
		SET 
		    end_time = CONCAT(#{date}, ' ', #{end_time}), 
		    content = '수정',
		    start_time = CONCAT(#{date}, ' ', #{start_time}),
		    calculate_time = TRUNCATE(TIMESTAMPDIFF(MINUTE, CONCAT(#{date}, ' ', #{start_time}), CONCAT(#{date}, ' ', #{end_time})) / 60, 1),
			status = CASE 
			             WHEN #{start_time} &lt;= '09:00' AND #{end_time} >= '18:00' THEN '정상'
			             WHEN #{start_time} > '09:00' AND #{end_time} >= '18:00' THEN '지각'
			             WHEN #{start_time} > '09:00' AND #{end_time} &lt; '18:00' THEN '비정상'
			             WHEN #{start_time} &lt;= '09:00' AND #{end_time} &lt; '18:00' THEN '조퇴'
			         END
		WHERE 
			attend_idx = #{attendIdx}
	</update>
	<insert id="insertAttendanceHistory" parameterType="map">
		INSERT INTO attendance_history
		(emp_idx,attend_idx,content,prev_start_time,prev_end_time,new_start_time,new_end_time)
		VALUES
		(#{loginId},#{attendIdx},#{content},
      	CASE WHEN #{prevStartTime} = '00:00:00' THEN NULL ELSE #{prevStartTime} END,
        CASE WHEN #{prevEndTime} = '00:00:00' THEN NULL ELSE #{prevEndTime} END,
		CONCAT(#{date}, ' ', #{start_time}),CONCAT(#{date}, ' ', #{end_time}))
	</insert>
	
	<!-- 출퇴근 수정 내역 가져오기 -->
	<select id="getAttendanceHistory" parameterType="map" resultType="map">
	    SELECT
	        DATE_FORMAT(ah.date, '%Y-%m-%d %H:%i') AS date,
	        DATE_FORMAT(ah.prev_start_time, '%H:%i') AS prevStart,
	        DATE_FORMAT(ah.prev_end_time, '%H:%i') AS prevEnd,
	        DATE_FORMAT(ah.new_start_time, '%H:%i') AS newStart,
	        DATE_FORMAT(ah.new_end_time, '%H:%i') AS newEnd,
	        DATE_FORMAT(ah.new_end_time, '%Y-%m-%d') AS beforeDate,
	        ah.emp_idx,
	        ah.content,
	        e.name
	    FROM
	        attendance_history ah
	    JOIN
	        attendance a ON ah.attend_idx = a.attend_idx
	    JOIN
	        employee e ON ah.emp_idx = e.emp_idx
	    WHERE
	        a.emp_idx = #{loginId}
	    ORDER BY
	        ah.attend_update_idx DESC
	</select>
	
	<select id="getEmpIp" parameterType="map">
		SELECT ip FROM employee WHERE emp_idx = #{loginId}
	</select>
	
	
	
</mapper>  











































