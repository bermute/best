<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.best.chat.ChatDAO">

	<!-- 참여중인 대화방 리스트 & 해당 대화방에 내가 안읽은 메시지 & 최신 메시지 내용과 전송 시간 -->
	<select id="chatListWithUnread" resultType="map">
		SELECT DISTINCT
		c.chat_idx,
		c.chat_subject,
		(
		SELECT m.content
		FROM message
		m
		WHERE m.chat_idx = c.chat_idx
		ORDER BY m.time DESC
		LIMIT 1
		) AS
		latest_message,
		(
		SELECT m.time
		FROM message m
		WHERE m.chat_idx =
		c.chat_idx
		ORDER BY m.time DESC
		LIMIT 1
		) AS latest_time,
		(
		SELECT COUNT(*)
		FROM message m
		LEFT JOIN msg_read mr
		ON m.msg_idx = mr.msg_idx
		AND
		mr.emp_idx = #{emp_idx}
		WHERE m.chat_idx = c.chat_idx
		AND (mr.is_read =
		0 AND mr.msg_idx IS NOT NULL)
		) AS unread_count
		FROM chat c
		JOIN party p
		ON c.chat_idx = p.chat_idx
		JOIN employee e ON p.emp_idx = e.emp_idx
		<where>
			p.emp_idx = #{emp_idx}
			<if test="keyword != null and keyword != ''">
				AND (
				e.name LIKE CONCAT('%', #{keyword}, '%')
				OR EXISTS (
				SELECT 1
				FROM party p2
				JOIN employee e2 ON p2.emp_idx = e2.emp_idx
				WHERE p2.chat_idx = c.chat_idx
				AND e2.name LIKE CONCAT('%',
				#{keyword}, '%')
				)
				)
			</if>
		</where>
		ORDER BY latest_time DESC
	</select>

	<!-- 나를 제외한 참여중인 대화방 참여자 리스트 -->
	<select id="getParticipantNames" resultType="string">
		SELECT e.name,
		e.photo
		FROM employee e
		JOIN party p ON e.emp_idx = p.emp_idx
		WHERE
		p.chat_idx = #{chat_idx} AND e.emp_idx != #{emp_idx}
	</select>

	<!-- 모든 회원 리스트 -->
	<select id="getEmployeeList" resultType="map">
		SELECT
		e.emp_idx,
		e.name,
		e.photo,
		r.rank_name
		FROM
		employee e
		LEFT JOIN
		rank_emp r ON e.rank_idx = r.rank_idx
		<where>
			<if test="keyword != null and keyword != ''">
				e.name LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</where>
		ORDER BY r.rank_idx;
	</select>


	<!-- 모든 대화방 -->
	<select id="getAllChatIdx" resultType="int">
		SELECT chat_idx FROM chat
	</select>

	<!-- 대화방 생성 -->
	<insert id="insertChat" useGeneratedKeys="true"
		keyProperty="chat_idx">
		INSERT INTO chat (chat_subject, created_at)
		VALUES
		(#{chat_subject}, NOW())
	</insert>

	<!-- 참여자 확인 -->
	<select id="checkPartyExists" resultType="int">
		SELECT COUNT(*)
		FROM
		party
		WHERE chat_idx = #{chat_idx}
		AND emp_idx = #{emp_idx}
	</select>

	<!-- 초대 -->
	<insert id="insertParty">
		INSERT INTO party (chat_idx, emp_idx, enter_time)
		VALUES (#{chat_idx}, #{emp_idx}, NOW())
	</insert>

	<!-- 시스템 메시지 확인 -->
	<select id="checkEnterMessageExists" resultType="int">
		SELECT COUNT(*)
		FROM message
		WHERE chat_idx = #{chat_idx}
		AND message_type = 'system'
		AND content = #{content}
	</select>

	<!-- 회원 이름 -->
	<select id="getEmployeeName">
		SELECT name FROM employee WHERE emp_idx = #{emp_idx}
	</select>

	<!-- 입장 시스템 메시지 -->
	<insert id="insertEnterMessage">
		INSERT INTO message (chat_idx, content, time,
		message_type)
		VALUES (#{chat_idx}, #{content}, NOW(), 'system')
	</insert>

	<!-- 메시지 저장 -->
	<insert id="message" parameterType="com.best.chat.MessageDTO"
		useGeneratedKeys="true" keyProperty="msg_idx">
		INSERT INTO message (chat_idx,
		msg_send_idx, content, time)
		VALUES (#{chat_idx}, #{msg_send_idx},
		#{content}, NOW())
	</insert>

	<!-- 메시지 날짜 확인 -->
	<select id="checkMessageExistsForToday" parameterType="map"
		resultType="int">
		SELECT COUNT(*)
		FROM message
		WHERE chat_idx = #{chat_idx}
		AND
		DATE(time) = CURRENT_DATE;
	</select>

	<!-- 메시지 뿌려주기 -->
	<select id="getMessagesByChatIdx" resultType="map">
		SELECT
		m.msg_idx,
		m.content,
		m.time,
		m.msg_send_idx,
		m.message_type,
		e.name,
		e.photo,
		re.rank_name,
		(
		SELECT
		COUNT(*)
		FROM
		msg_read mr
		WHERE
		mr.msg_idx = m.msg_idx
		AND mr.is_read = 0
		) AS unread_count
		FROM
		message m
		LEFT JOIN
		employee e ON m.msg_send_idx = e.emp_idx
		LEFT JOIN
		rank_emp re ON e.rank_idx = re.rank_idx
		LEFT JOIN
		party p ON m.chat_idx = p.chat_idx AND p.emp_idx = #{empIdx}
		WHERE
		m.chat_idx = #{chatIdx}
		AND m.time >= p.enter_time
		ORDER BY
		m.time ASC
	</select>



	<!-- 참여중인 대화방 참여자 리스트 -->
	<select id="getChatParticipants" resultType="map">
		SELECT
		e.emp_idx,
		e.name,
		e.photo,
		r.rank_name
		FROM
		employee e
		LEFT JOIN
		rank_emp r ON
		e.rank_idx = r.rank_idx
		JOIN
		party p ON e.emp_idx = p.emp_idx
		WHERE
		p.chat_idx = #{chat_idx}
	</select>

	<!-- 대화방 나가기 -->
	<delete id="removeParticipant">
		DELETE FROM party
		WHERE chat_idx = #{chat_idx}
		AND
		emp_idx = #{emp_idx}
	</delete>

	<!-- 연결 상태 존재 여부 확인 -->
	<select id="checkConnectionStatusExists" resultType="int">
		SELECT
		COUNT(*)
		FROM connection_status
		WHERE chat_idx = #{chatIdx} AND emp_idx
		= #{empIdx}
	</select>

	<!-- 연결 상태 INSERT -->
	<insert id="insertConnectionStatus">
		INSERT INTO connection_status (chat_idx, emp_idx,
		connection_start)
		VALUES (#{chatIdx}, #{empIdx}, #{startTime})
	</insert>

	<!-- 연결 상태 UPDATE -->
	<update id="updateConnectionTime">
		UPDATE connection_status
		<choose>
			<when test="action == 'start'">
				SET connection_start = #{time}, connection_end =
				'2038-01-19 03:14:07'
			</when>
			<when test="action == 'end'">
				SET connection_end = #{time}
			</when>
		</choose>
		WHERE chat_idx = #{chatIdx}
		AND emp_idx = #{empIdx};
	</update>

	<!-- 읽음 상태 업데이트 -->
	<update id="markMessagesAsRead">
		UPDATE msg_read
		SET is_read = 1, read_at = NOW()
		WHERE
		emp_idx = #{empIdx}
		AND msg_idx IN (
		SELECT m.msg_idx
		FROM message m
		JOIN
		connection_status cs
		ON cs.emp_idx = #{empIdx}
		AND cs.chat_idx =
		m.chat_idx
		WHERE
		m.chat_idx = #{chatIdx}
		AND (
		m.time &lt;=
		cs.connection_start
		OR m.time BETWEEN cs.connection_start AND
		cs.connection_end
		)
		)
	</update>

	<!-- msg_idx 를 chat_idx 별로 뽑기 -->
	<select id="getMsgIdxListByChatIdx" resultType="int">
		SELECT msg_idx
		FROM message
		WHERE chat_idx = #{chatIdx}
	</select>

	<!-- 메시지 발송 즉시 메시지 옆에 안읽은 사용자 숫자 -->
	<select id="getUnreadUserCount" resultType="int">
		SELECT COUNT(*)
		FROM
		msg_read
		WHERE msg_idx = #{msgIdx}
		AND is_read = 0
	</select>

	<!-- 메시지 발송하면서 기본 안읽음처리 등록 -->
	<insert id="insertDefaultMsgRead" parameterType="map">
		INSERT INTO
		msg_read (msg_idx, emp_idx, is_read, read_at)
		SELECT
		#{msg_idx},
		p.emp_idx,
		CASE
		WHEN cs.emp_idx IS NOT NULL THEN 1
		ELSE 0
		END,
		CASE
		WHEN
		cs.emp_idx IS NOT NULL THEN NOW()
		ELSE NULL
		END
		FROM party p
		LEFT JOIN
		connection_status cs
		ON cs.chat_idx = #{chat_idx}
		AND cs.emp_idx =
		p.emp_idx
		AND cs.connection_start IS NOT NULL
		AND (cs.connection_end IS
		NULL OR cs.connection_end > NOW())
		WHERE p.chat_idx = #{chat_idx}
		AND
		p.emp_idx != #{sender_idx};
	</insert>

	<!-- 회원 프로필 -->
	<select id="profile" parameterType="int" resultType="map">
		SELECT
		e.emp_idx,
		e.name,
		e.email,
		e.phone,
		e.photo,
		e.mobile,
		e.state,
		r.rank_name,
		d.depart_name
		FROM
		employee e
		LEFT JOIN
		rank_emp r ON
		e.rank_idx = r.rank_idx
		LEFT JOIN
		department d ON e.depart_idx =
		d.depart_idx
		WHERE
		e.emp_idx = #{empIdx}
	</select>

	<!-- 대화방 제목 변경 -->
	<update id="updateChatSubject"
		parameterType="com.best.chat.ChatDTO">
		UPDATE chat
		SET chat_subject = #{chat_subject}
		WHERE
		chat_idx = #{chat_idx}
	</update>

	<!-- 대화방 공지사항 등록 -->
	<update id="updateChatNotice" parameterType="map">
		UPDATE chat
		SET
		chat_notice = #{noticeContent}
		WHERE chat_idx = #{chatIdx}
	</update>

	<!-- 대화방 공지사항 가져오기 -->
	<select id="getChatNotice" resultType="string">
		SELECT chat_notice
		FROM
		chat
		WHERE chat_idx = #{chat_idx}
	</select>

	<!-- 메시지 발송자 정보뽑기 -->
	<select id="senderInfo" resultType="map">
		SELECT
		e.emp_idx,
		e.name,
		e.photo,
		re.rank_name
		FROM
		employee e
		LEFT JOIN
		rank_emp re ON e.rank_idx =
		re.rank_idx
		WHERE
		e.emp_idx = #{empIdx}
	</select>

	<!-- 안 읽은 메시지 총 갯수 -->
	<select id="unreadTotal" parameterType="int" resultType="int">
		SELECT
		COUNT(*)
		FROM msg_read
		WHERE emp_idx = #{emp_idx} AND is_read = 0
	</select>

	<!-- 메시지 알림 -->
	<select id="msgAlarm" resultType="map">
		SELECT
		m.chat_idx,
		m.msg_idx,
		m.content,
		m.time,
		m.msg_send_idx
		FROM
		msg_read mr
		JOIN
		message m ON
		mr.msg_idx = m.msg_idx
		WHERE
		mr.emp_idx = #{empIdx}
		AND mr.is_read = 0
		ORDER BY
		m.time DESC
		LIMIT 5
	</select>

















	<!-- 두 명만 참여하는 대화방 확인 -->
	<select id="findSingleChatRoom" resultType="int">
		SELECT c.chat_idx
		FROM chat c
		JOIN party p1 ON c.chat_idx = p1.chat_idx
		JOIN party p2 ON
		c.chat_idx = p2.chat_idx
		WHERE p1.emp_idx = #{emp_idx1}
		AND p2.emp_idx =
		#{emp_idx2}
		AND c.chat_idx NOT IN (
		SELECT chat_idx
		FROM party
		GROUP BY
		chat_idx
		HAVING COUNT(emp_idx) > 2
		)
	</select>

	<!-- 대화방 참여중인 사원 제외 -->
	<select id="chatParty" resultType="map">
		SELECT
		e.emp_idx,
		e.name,
		e.photo,
		r.rank_name
		FROM
		employee e
		LEFT JOIN
		rank_emp r ON e.rank_idx = r.rank_idx
		WHERE e.emp_idx NOT IN (
		SELECT
		p.emp_idx
		FROM party p
		WHERE p.chat_idx = #{chatIdx}
		)
		<if test="keyword != null and keyword != ''">
			AND e.name LIKE CONCAT('%', #{keyword}, '%')
		</if>
		ORDER BY r.rank_idx;
	</select>


</mapper>  